<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>README</title>
  <style>
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<p><a href="https://www.nuget.org/packages/Invoke-Build"><img src="https://buildstats.info/nuget/Invoke-Build" alt="NuGet" /></a> <a href="https://www.powershellgallery.com/packages/InvokeBuild"><img src="https://img.shields.io/powershellgallery/dt/InvokeBuild.svg" alt="PSGallery" /></a> <img src="https://raw.githubusercontent.com/nightroman/Invoke-Build/master/ib.png" align="right"/></p>
<h2 id="build-automation-in-powershell">Build Automation in PowerShell</h2>
<p>Invoke-Build is a build and test automation tool which invokes tasks defined in PowerShell v2.0+ scripts. It is similar to psake but arguably easier to use and more powerful. It is complete, bug free, well covered by tests.</p>
<p>In addition to basic task processing the engine supports</p>
<ul>
<li>Incremental tasks with effectively processed inputs and outputs.</li>
<li>Persistent builds which can be resumed after interruptions.</li>
<li>Parallel builds in separate workspaces with common stats.</li>
<li>Batch invocation of tests composed as tasks.</li>
<li>Ability to define new classes of tasks.</li>
</ul>
<p>Invoke-Build v3.0.1+ is cross-platform with PowerShell v6.</p>
<p>Invoke-Build can be effectively used in VSCode and ISE.</p>
<p>Several <em>PowerShell Team</em> projects use Invoke-Build.</p>
<h2 id="the-package">The package</h2>
<p>The package includes the engine, helpers, and the generated help:</p>
<ul>
<li><em>Invoke-Build.ps1</em> - invokes build scripts, this is the build engine</li>
<li><em>Build-Checkpoint.ps1</em> - invokes persistent builds using the engine</li>
<li><em>Build-Parallel.ps1</em> - invokes parallel builds using the engine</li>
<li><em>Resolve-MSBuild.ps1</em> - finds the specified or latest MSBuild</li>
<li><em>Show-TaskHelp.ps1</em> - shows task help, used on WhatIf calls</li>
<li><em>InvokeBuild-Help.xml</em> - external content for Get-Help</li>
<li><em>ib.cmd</em> - Invoke-Build helper for cmd.exe</li>
</ul>
<p>Extra tools, see PSGallery and the repository:</p>
<ul>
<li><em>Invoke-Build.ArgumentCompleters.ps1</em> - completers for v5 native, TabExpansionPlusPlus, TabExpansion2.ps1</li>
<li><em>Invoke-TaskFromVSCode.ps1</em> - invokes a task from a build script opened in VSCode</li>
<li><em>New-VSCodeTask.ps1</em> - generates VSCode tasks bound to build script tasks</li>
<li><em>Invoke-TaskFromISE.ps1</em> - invokes a task from a script opened in ISE</li>
</ul>
<p>And some more tools, see the repository:</p>
<ul>
<li><em>Build-JustTask.ps1</em> - invokes tasks without references</li>
<li><em>Convert-psake.ps1</em> - converts psake build scripts</li>
<li><em>Show-BuildTree.ps1</em> - shows task trees as text</li>
<li><em>Show-BuildDgml.ps1</em> - shows task trees as DGML</li>
<li><em>Show-BuildGraph.ps1</em> - shows task trees by Graphviz</li>
</ul>
<h2 id="install-as-module">Install as module</h2>
<p>Invoke-Build is distributed as the module <a href="https://www.powershellgallery.com/packages/InvokeBuild">InvokeBuild</a>. In PowerShell 5.0 or with PowerShellGet you can install it by this command</p>
<pre><code>Install-Module InvokeBuild
</code></pre>
<p>To install the module with Chocolatey, run the following command. NOTE: This package is maintained by its owner, see package info.</p>
<pre><code>choco install invoke-build
</code></pre>
<p>Module commands: <code>Invoke-Build</code>, <code>Build-Checkpoint</code>, <code>Build-Parallel</code>. Import the module in order to make them available:</p>
<pre><code>Import-Module InvokeBuild
</code></pre>
<p>You can also call the module scripts directly. Consider to include the module directory to the path. In this scenario you do not have to import the module.</p>
<h2 id="install-as-scripts">Install as scripts</h2>
<p>Invoke-Build is also distributed as the NuGet package <a href="https://www.nuget.org/packages/Invoke-Build">Invoke-Build</a>. This package includes the module files, so it can be used as the module, too, either copy it to the standard module folder or import its <code>InvokeBuild.psd1</code>.</p>
<p>If you use <a href="https://github.com/lukesampson/scoop">scoop</a> then invoke</p>
<pre><code>scoop install invoke-build
</code></pre>
<p>and you are done, scripts are downloaded and their directory is added to the path. You may need to start a new PowerShell session with the updated path.</p>
<p>Otherwise, download the package manually, rename it to zip, extract its <em>tools</em> and rename to <em>InvokeBuild</em>. Consider to include this directory to the path so that script paths may be omitted in commands. Or copy to the PowerShell module directory in order to use as the module.</p>
<p>With <em>cmd.exe</em> use the helper <em>ib.cmd</em>. For similar experience in interactive PowerShell use an alias <code>ib</code> defined in a PowerShell profile</p>
<pre><code>Set-Alias ib &lt;path&gt;\Invoke-Build.ps1
</code></pre>
<p><code>&lt;path&gt;\</code> may be omitted if the script is in the path.</p>
<h2 id="getting-help">Getting help</h2>
<p>If you are using the module (see <a href="https://github.com/PowerShell/PowerShell/issues/2899">#2899</a>) or the script is not in the path then use the full path to <em>Invoke-Build.ps1</em> instead of <em>Invoke-Build</em> in the below commands, see <code>(Get-Alias Invoke-Build).Definition</code></p>
<p>In order to get help for the engine, invoke:</p>
<pre><code>help Invoke-Build -full
</code></pre>
<p>In order to get help for internal commands:</p>
<pre><code>. Invoke-Build
help task -full
help exec -full
...
</code></pre>
<h2 id="online-resources">Online resources</h2>
<ul>
<li><a href="https://github.com/nightroman/Invoke-Build/wiki/Concepts">Basic Concepts</a> : Why build scripts may have advantages over normal scripts.</li>
<li><a href="https://github.com/nightroman/Invoke-Build/wiki/Script-Tutorial">Script Tutorial</a> : Take a look in order to get familiar with build scripts.</li>
<li><a href="https://github.com/nightroman/Invoke-Build/wiki">Project Wiki</a> : Detailed tutorials, helpers, notes, and etc.</li>
<li><a href="https://github.com/nightroman/Invoke-Build/wiki/Build-Scripts-in-Projects">Examples</a> : Build scripts used in various projects.</li>
<li><a href="https://github.com/nightroman/Invoke-Build/tree/master/Tasks">Tasks</a> : Samples, patterns, and various techniques.</li>
<li><a href="https://github.com/nightroman/Invoke-Build/wiki/Design-Notes">Design Notes</a> : Technical details for contributors.</li>
</ul>
<p>Questions, suggestions, and reports are welcome as project issues. Or just hit me up on Twitter <a href="https://twitter.com/romkuzmin">@romkuzmin</a></p>
<h2 id="credits">Credits</h2>
<ul>
<li>The project was inspired by <a href="https://github.com/psake/psake"><em>psake</em></a>, see <a href="https://github.com/nightroman/Invoke-Build/wiki/Comparison-with-psake">Comparison with psake</a>.</li>
<li>Some concepts came from <a href="https://github.com/Microsoft/msbuild"><em>MSBuild</em></a>, see <a href="https://github.com/nightroman/Invoke-Build/wiki/Comparison-with-MSBuild">Comparison with MSBuild</a>.</li>
</ul>
</body>
</html>
